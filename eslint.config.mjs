import js from '@eslint/js';
import tseslint from 'typescript-eslint';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';

export default tseslint.config(
  js.configs.recommended,
  ...tseslint.configs.recommended,
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    ignores: [
      'node_modules/**/*',
      'dist/**/*',
      'build/**/*',
      'coverage/**/*',
      '*.config.js',
      '*.config.mjs',
      '*.config.ts',
      'arriendo-zero/**/*',
      'tests/__mocks__/**/*'
    ],
      languageOptions: {
        ecmaVersion: 2020,
        sourceType: 'module',
        globals: {
          console: 'readonly',
          process: 'readonly',
          Buffer: 'readonly',
          __dirname: 'readonly',
          __filename: 'readonly',
          global: 'readonly',
          module: 'readonly',
          require: 'readonly',
          exports: 'readonly',
          window: 'readonly',
          document: 'readonly',
          navigator: 'readonly',
          localStorage: 'readonly',
          sessionStorage: 'readonly',
          fetch: 'readonly',
          URL: 'readonly',
          URLSearchParams: 'readonly',
          Headers: 'readonly',
          Request: 'readonly',
          Response: 'readonly',
          FormData: 'readonly',
          File: 'readonly',
          FileReader: 'readonly',
          Blob: 'readonly',
          Event: 'readonly',
          EventTarget: 'readonly',
          CustomEvent: 'readonly',
          AbortController: 'readonly',
          AbortSignal: 'readonly',
          setTimeout: 'readonly',
          setInterval: 'readonly',
          clearTimeout: 'readonly',
          clearInterval: 'readonly',
          setImmediate: 'readonly',
          clearImmediate: 'readonly',
          requestAnimationFrame: 'readonly',
          cancelAnimationFrame: 'readonly',
          requestIdleCallback: 'readonly',
          cancelIdleCallback: 'readonly',
          performance: 'readonly',
          crypto: 'readonly',
          TextEncoder: 'readonly',
          TextDecoder: 'readonly',
          atob: 'readonly',
          btoa: 'readonly',
          escape: 'readonly',
          unescape: 'readonly',
          encodeURI: 'readonly',
          encodeURIComponent: 'readonly',
          decodeURI: 'readonly',
          decodeURIComponent: 'readonly',
          isNaN: 'readonly',
          isFinite: 'readonly',
          parseFloat: 'readonly',
          parseInt: 'readonly',
          Infinity: 'readonly',
          NaN: 'readonly',
          undefined: 'readonly',
          null: 'readonly',
          true: 'readonly',
          false: 'readonly',
          Object: 'readonly',
          Array: 'readonly',
          String: 'readonly',
          Number: 'readonly',
          Boolean: 'readonly',
          Symbol: 'readonly',
          Function: 'readonly',
          RegExp: 'readonly',
          Date: 'readonly',
          Error: 'readonly',
          TypeError: 'readonly',
          ReferenceError: 'readonly',
          SyntaxError: 'readonly',
          RangeError: 'readonly',
          EvalError: 'readonly',
          URIError: 'readonly',
          JSON: 'readonly',
          Math: 'readonly',
          Reflect: 'readonly',
          Proxy: 'readonly',
          Map: 'readonly',
          Set: 'readonly',
          WeakMap: 'readonly',
          WeakSet: 'readonly',
          Promise: 'readonly',
          Generator: 'readonly',
          GeneratorFunction: 'readonly',
          AsyncFunction: 'readonly',
          AsyncGenerator: 'readonly',
          AsyncGeneratorFunction: 'readonly',
          Int8Array: 'readonly',
          Uint8Array: 'readonly',
          Uint8ClampedArray: 'readonly',
          Int16Array: 'readonly',
          Uint16Array: 'readonly',
          Int32Array: 'readonly',
          Uint32Array: 'readonly',
          Float32Array: 'readonly',
          Float64Array: 'readonly',
          BigInt64Array: 'readonly',
          BigUint64Array: 'readonly',
          DataView: 'readonly',
          ArrayBuffer: 'readonly',
          SharedArrayBuffer: 'readonly',
          Atomics: 'readonly',
          WebAssembly: 'readonly'
        }
      },
      plugins: {
        'react-hooks': reactHooks,
        'react-refresh': reactRefresh
      },
      rules: {
        ...reactHooks.configs.recommended.rules,
        'react-refresh/only-export-components': [
          'warn',
          { allowConstantExport: true }
        ],
        '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
        '@typescript-eslint/no-explicit-any': 'warn',
        'no-console': 'warn'
      }
    }
  );
