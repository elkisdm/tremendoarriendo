---
description: Plantillas de prompts (Arranque, Diagn√≥stico, Componente, API, Cierre)
alwaysApply: false
---

Usa cuando el usuario pida una de estas plantillas. Entrega EXACTO con las estructuras A‚ÄìE (plan/paso1/QA/rollback).

## A) PLANTILLA DIAGN√ìSTICO
```
## üîç DIAGN√ìSTICO: [T√≠tulo del problema]

### Contexto
- [Descripci√≥n breve del problema]
- [Archivos afectados]
- [Comportamiento esperado vs actual]

### An√°lisis
- [Causa ra√≠z identificada]
- [Impacto en UX/Performance/Seguridad]
- [Dependencias afectadas]

### Plan de Acci√≥n (5-7 pasos)
1. [Paso 1: Acci√≥n espec√≠fica]
2. [Paso 2: Acci√≥n espec√≠fica]
3. [Paso 3: Acci√≥n espec√≠fica]
4. [Paso 4: Acci√≥n espec√≠fica]
5. [Paso 5: Acci√≥n espec√≠fica]

### Comandos QA
```bash
# Verificar el problema
[comando espec√≠fico]

# Tests relacionados
[comando de test]
```

### Riesgos y Rollback
- **Riesgos**: [Lista de posibles problemas]
- **Rollback**: [Pasos para revertir si algo sale mal]
```

## B) PLANTILLA API
```
## üöÄ API: [Nombre del endpoint]

### Plan (5-7 pasos)
1. Crear schema Zod para validaci√≥n
2. Implementar rate limiting (20/60s/IP)
3. Crear handler con validaci√≥n
4. A√±adir manejo de errores
5. Tests de integraci√≥n
6. Documentaci√≥n y curl test

### PASO 1: Schema y estructura base
[Implementaci√≥n del Paso 1]

### Test Curl
```bash
curl -X POST http://localhost:3000/api/[endpoint] \
  -H "Content-Type: application/json" \
  -d '{"test": "data"}'
```

### Comandos QA
```bash
pnpm lint
pnpm typecheck
pnpm test -- --testNamePattern="[nombre del test]"
```

### Riesgos y Rollback
- **Riesgos**: Rate limiting mal configurado, validaci√≥n insuficiente
- **Rollback**: Revertir commit, verificar logs
```

## C) PLANTILLA COMPONENTE
```
## üé® COMPONENTE: [Nombre del componente]

### Plan (5-7 pasos)
1. Crear estructura base (RSC por defecto)
2. Implementar props tipadas
3. A√±adir estilos Tailwind + A11y
4. Tests de render e interacci√≥n
5. Integraci√≥n en p√°gina
6. Optimizaci√≥n performance

### PASO 1: Estructura base
[Implementaci√≥n del Paso 1]

### Comandos QA
```bash
pnpm lint
pnpm typecheck
pnpm test -- --testNamePattern="[ComponentName]"
```

### Riesgos y Rollback
- **Riesgos**: Breaking changes en props, problemas de A11y
- **Rollback**: Revertir componente, verificar build
```

## D) PLANTILLA P√ÅGINA
```
## üìÑ P√ÅGINA: [Nombre de la p√°gina]

### Plan (5-7 pasos)
1. Crear estructura page.tsx + layout
2. Implementar SSR/ISR con revalidate
3. Metadatos din√°micos
4. Error boundaries
5. Loading states
6. Tests de ruta

### PASO 1: Estructura base
[Implementaci√≥n del Paso 1]

### Comandos QA
```bash
pnpm build
pnpm start
# Verificar en http://localhost:3000/[ruta]
```

### Riesgos y Rollback
- **Riesgos**: Problemas de SSR, metadatos incorrectos
- **Rollback**: Revertir p√°gina, verificar routing
```

## E) PLANTILLA CIERRE
```
## ‚úÖ CIERRE: [T√≠tulo de la tarea]

### Resumen de Cambios
- [Lista de archivos modificados]
- [Funcionalidades implementadas]
- [Tests a√±adidos]

### Verificaci√≥n Final
- [ ] Build exitoso
- [ ] Tests pasando
- [ ] Lint sin errores
- [ ] TypeScript sin errores
- [ ] A11y verificada
- [ ] Performance OK

### Pr√≥ximos Pasos
- [Siguiente tarea o mejora]
- [Consideraciones para el futuro]

### Comandos de Verificaci√≥n
```bash
pnpm lint && pnpm typecheck && pnpm test && pnpm build
```
```
description:
globs:
alwaysApply: false
---
